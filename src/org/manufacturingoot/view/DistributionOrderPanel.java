package org.manufacturingoot.view;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.manufacturingoot.model.DistributionOrder;
import org.manufacturingoot.model.DistributionOrder;
import org.manufacturingoot.service.DistributionOrderService;
import org.manufacturingoot.service.exceptions.NonexistentEntityException;
import org.manufacturingoot.util.Constants;

public class DistributionOrderPanel extends javax.swing.JPanel {

    private EntityManagerFactory emf;

    public DistributionOrderPanel(EntityManagerFactory emf) {
        initComponents();
        this.emf = emf;
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        buttonReload = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        buttonNew = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Distribution Order");

        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Full Name", "Email", "Address", "Send Date", "Phone Number", "Order From"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableData);

        buttonReload.setText("Reload");
        buttonReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReloadActionPerformed(evt);
            }
        });

        buttonUpdate.setText("Update");
        buttonUpdate.setEnabled(false);
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonNew.setText("New");
        buttonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonReload)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonReload)
                    .addComponent(buttonUpdate)
                    .addComponent(buttonNew)
                    .addComponent(buttonDelete))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReloadActionPerformed
        loadTable();
    }//GEN-LAST:event_buttonReloadActionPerformed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        String id = "";
        DistributionOrder selected = null;

        try {
            id = tableData.getValueAt(tableData.getSelectedRow(), 0)
                    .toString();

            selected = new DistributionOrderService(emf)
                    .findDistributionOrder(Long.parseLong(id));
        } catch (IndexOutOfBoundsException ex) {
            System.out.println("no row selected, form for new data");
        } finally {
            openForm(selected);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed
    private void openForm(DistributionOrder selected) {
        DistributionOrderForm temp = new DistributionOrderForm(emf, selected);
        temp.setVisible(true);
        temp.addWindowListener(closeWindowAdapter());
    }
    private void buttonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewActionPerformed
        openForm(null);
    }//GEN-LAST:event_buttonNewActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        String id = "";

        try {
            id = tableData.getValueAt(tableData.getSelectedRow(), 0)
                    .toString();
            new DistributionOrderService(emf).destroy(Long.parseLong(id));
        } catch (IndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Pilih baris terlebih dahulu");
        } catch (NonexistentEntityException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Gagal menghapus data");
        }

        buttonReloadActionPerformed(evt);
    }//GEN-LAST:event_buttonDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonNew;
    private javax.swing.JButton buttonReload;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableData;
    // End of variables declaration//GEN-END:variables

    private void loadTable() {
        DistributionOrderService mos = new DistributionOrderService(emf);
        List<DistributionOrder> rows = mos.findDistributionOrderEntities();

        DefaultTableModel model = (DefaultTableModel) tableData.getModel();
        model.setNumRows(0);

        for (int i = 0; i < rows.size(); i++) {
            DistributionOrder current = rows.get(i);
            Object[] data = {
                current.getId(),
                current.getFullName(),
                current.getEmail(),
                current.getAddress(),
                new SimpleDateFormat(Constants.DATE_FORMAT).format(current.getSendDate()),
                current.getPhoneNumber(),
                current.getOrder().getEmail()
            };
            model.addRow(data);
        }

        buttonUpdate.setEnabled(true);
    }

    private WindowListener closeWindowAdapter() {
        return new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e); //To change body of generated methods, choose Tools | Templates.
                loadTable();
            }
        };
    }
}
